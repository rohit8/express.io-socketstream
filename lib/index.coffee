# Generated by CoffeeScript 1.4.0

#
#      if (key.indexOf('stream/') !== -1) {
#        key = key.replace('stream/', '');
#        return ss(socket).on(key.replace('stream/', ''), function(stream, data) {
#          return callback(stream, data, socket);
#        });
#      }
#      
(->
  ss = undefined
  path = undefined
  RequestIO = undefined
  RoomIO = undefined
  async = undefined
  connect = undefined
  express = undefined
  http = undefined
  https = undefined
  initRoutes = undefined
  io = undefined
  key = undefined
  listen = undefined
  middleware = undefined
  session = undefined
  sessionConfig = undefined
  value = undefined
  _ = undefined
  connect = require("express/node_modules/connect")
  express = require("express")
  io = require("socket.io")
  http = require("http")
  Grid = require("gridfs-stream")
  https = require("https")
  async = require("async")
  middleware = require("./middleware")
  _ = require("underscore")
  RequestIO = require("./request").RequestIO
  RoomIO = require("./room").RoomIO
  ss = require("socket.io-stream")
  path = require("path")
  express.io = io
  express.io.routeForward = middleware.routeForward
  session = express.session
  delete express.session

  sessionConfig = new Object
  console.log "Starting Express.io app!"
  express.session = (options) ->
    _ref = undefined
    _ref1 = undefined
    _ref2 = undefined
    options = new Object  unless options?
    options.key = "connect.sid"  unless (_ref = options.key)?
    options.store = new session.MemoryStore  unless (_ref1 = options.store)?
    options.cookie = new Object  unless (_ref2 = options.cookie)?
    sessionConfig = options
    session options

  for key of session
    value = session[key]
    express.session[key] = value
  express.application.http = ->
    @server = http.createServer(this)
    this

  express.application.https = (options) ->
    @server = https.createServer(options, this)
    this

  express.application.io = (options) ->
    defaultOptions = undefined
    _this = this
    options = new Object  unless options?
    defaultOptions = log: false
    _.extend options, defaultOptions
    @io = io.listen(@server, options)
    @io.router = new Object
    @io.middleware = []
    @io.route = (route, next, options) ->
      split = undefined
      _results = undefined
      if ((if options? then options.trigger else undefined)) is true
        if route.indexOf(":" is -1)
          @router[route] next
        else
          split = route.split(":")
          @router[split[0]][split[1]] next
      if _.isFunction(next)
        @router[route] = next
      else
        _results = []
        for key of next
          value = next[key]
          _results.push @router["" + route + ":" + key] = value
        _results

    @io.configure ->
      _this.io.set "authorization", (data, next) ->
        cookieParser = undefined
        unless sessionConfig.store?
          return async.forEachSeries(_this.io.middleware, (callback, next) ->
            callback data, next
          , (error) ->
            return next(error)  if error?
            next null, true
          )
        cookieParser = express.cookieParser()
        cookieParser data, null, (error) ->
          rawCookie = undefined
          request = undefined
          sessionId = undefined
          return next(error)  if error?
          rawCookie = data.cookies[sessionConfig.key]
          unless rawCookie?
            request = headers:
              cookie: data.query.cookie

            return cookieParser(request, null, (error) ->
              sessionId = undefined
              data.cookies = request.cookies
              rawCookie = data.cookies[sessionConfig.key]
              return next("No cookie present", false)  unless rawCookie?
              sessionId = connect.utils.parseSignedCookie(rawCookie, sessionConfig.secret)
              data.sessionID = sessionId
              sessionConfig.store.get sessionId, (error, session) ->
                return next(error)  if error?
                data.session = new connect.session.Session(data, session)
                next null, true

            )
          sessionId = connect.utils.parseSignedCookie(rawCookie, sessionConfig.secret)
          data.sessionID = sessionId
          sessionConfig.store.get sessionId, (error, session) ->
            return next(error)  if error?
            data.session = new connect.session.Session(data, session)
            next null, true




    @io.use = (callback) ->
      _this.io.middleware.push callback

    @io.sockets.on "connection", (socket) ->
      initRoutes socket, _this.io

    @io.broadcast = ->
      args = undefined
      args = Array::slice.call(arguments_, 0)
      _this.io.sockets.emit.apply _this.io.sockets, args

    @io.room = (room) ->
      new RoomIO(room, _this.io.sockets)

    @stack.push
      route: ""
      handle: (request, response, next) ->
        request.io =
          route: (route) ->
            ioRequest = undefined
            ioRequest = new Object
            for key of request
              value = request[key]
              ioRequest[key] = value
            ioRequest.io =
              broadcast: _this.io.broadcast
              respond: ->
                args = undefined
                args = Array::slice.call(arguments_, 0)
                response.json.apply response, args

              route: (route) ->
                _this.io.route route, ioRequest,
                  trigger: true


              data: request.body

            _this.io.route route, ioRequest,
              trigger: true


          broadcast: _this.io.broadcast

        next()

    this

  listen = express.application.listen
  express.application.listen = ->
    args = undefined
    args = Array::slice.call(arguments_, 0)
    if @server?
      @server.listen.apply @server, args
    else
      listen.apply this, args

  initRoutes = (socket, io) ->
    setRoute = undefined
    _ref = undefined
    _results = undefined
    console.log "Initializing express.io"
    delivery = ss(socket)
    setRoute = (key, callback) ->
      socket.on key, (data, respond) ->
        request = undefined
        _base = undefined
        _ref = undefined
        if typeof data is "function"
          respond = data
          data = undefined
        request =
          data: data
          session: socket.handshake.session
          sessionID: socket.handshake.sessionID
          sessionStore: sessionConfig.store
          socket: socket
          headers: socket.handshake.headers
          cookies: socket.handshake.cookies
          handshake: socket.handshake

        session = socket.handshake.session
        request.session = new connect.session.Session(request, session)  if session?
        socket.handshake.session = request.session
        request.io = new RequestIO(socket, request, io)
        request.io.respond = respond
        _base.respond = ->  unless (_ref = (_base = request.io).respond)?
        callback request, delivery


    _ref = io.router
    _results = []
    for key of _ref
      value = _ref[key]
      _results.push setRoute(key, value)
    _results

  module.exports = express
).call this